<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>幻空轩</title><link href="http://www.joshuazhang.info/" rel="alternate"></link><link href="http://www.joshuazhang.info/feeds/Internet.atom.xml" rel="self"></link><id>http://www.joshuazhang.info/</id><updated>2013-04-18T19:13:00+02:00</updated><entry><title>导出Google Reader加星条目到Evernote</title><link href="http://www.joshuazhang.info/posts/2013/Apr/export-googlereader-starreditem-to-evernote.html" rel="alternate"></link><updated>2013-04-18T19:13:00+02:00</updated><author><name>voidmous</name></author><id>tag:www.joshuazhang.info,2013-04-18:posts/2013/Apr/export-googlereader-starreditem-to-evernote.html</id><summary type="html">&lt;p&gt;Google Reader即将离我们而去，这个决定目前看来没有挽回的可能。我个人对Google的服务也很依赖，Google Reader更是常驻在书签栏，不过与其把力气花在谴责Google的作为，不如寻找更好的替代品和抓紧时间备份积累的订阅源和文章。目前离7月1日尚早，其它在线阅读器还有很长的时间打磨产品，所以替代品的筛选还不急于一时。倒是收藏的文章（加星标的条目）怎么导出似乎没有引起大家的关注，我把自己搜索整理的一些导出方案记录下来并作个比较，虽然没有一一测试，希望我的判断能有些参考价值。&lt;/p&gt;
&lt;h2 id="_1"&gt;导出方案思路&lt;/h2&gt;
&lt;p&gt;目前网上可以搜集到的方案有这么几种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://blog.vsharing.com/ligongzi/A1472320.html"&gt;Google Reader的条目转发&lt;/a&gt;。手工转发当然是很蛋疼的，配合ifttt转发对已经加上星标的又没作用，需要更自动化的工具。&lt;/li&gt;
&lt;li&gt;&lt;a href="http://m.blog.csdn.net/blog/chief1985/6689805"&gt;基于html页面脚本或AHK脚本&lt;/a&gt;。这种方法大多是用脚本刷新页面直接打印为PDF，显然处理过程不怎么“漂亮”，而且输出也丢失了扩展性。&lt;/li&gt;
&lt;li&gt;基于第三方服务。目前似乎只有&lt;a href="http://blog.wiz.cn/google-reader.html"&gt;为知&lt;/a&gt;可以方便快捷地下载加星标的文章，但程序好像也不怎么给力。feedly貌似也可以直接导入加星标条目。&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.36kr.com/p/201886.html"&gt;RSS&lt;/a&gt;导出。这种方式貌似可以导出订阅源的所有条目，即便该博客已经不存在了。。。这种方法适合导出一个订阅源的所有文章，但缺点还是自动化程度太低。&lt;/li&gt;
&lt;li&gt;基于GoogleTakeout的导出数据。虽然关闭了Reader，但是Google对用户还是尽到了自己的责任，提供了一个强大而完备的备份工具，只不过导出的是比较另类的&lt;code&gt;.json&lt;/code&gt;文件。对它们做进一步处理可以得到组织良好的html文件。&lt;/li&gt;
&lt;li&gt;&lt;a href="http://mescoda.com/2011/12/gr2evernote/"&gt;GR2Evernote — 将Google Reader的分享内容导入Evernote&lt;/a&gt; ，&lt;a href="http://blog.sina.com.cn/s/blog_4afc0d8201017ah3.html"&gt;导出和备份google阅读器喜欢星标评论等历史内容到evernote或者wiz&lt;/a&gt; （未测试）&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.appinn.com/convertjson/"&gt;ConvertJSON – 转换 Google Reader 导出数据为网页&lt;/a&gt; （未测试）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我个人更喜欢最后一种思路，因为Google提供的备份文件组织良好，而且保留了重要的由用户操作过的文档数据（加星、分享等）而非全部备份文档数据，这使得导出的数据不会很大同时保留住了精华。这里我要推荐一个python脚本&lt;code&gt;export_gr2evernote&lt;/code&gt;，它的作用是处理&lt;code&gt;json&lt;/code&gt;文件得到Evernote自家的笔记本格式&lt;code&gt;.enex&lt;/code&gt;（也可以得到html格式），这样就可以导入到Evernote中，而Evernote虽小，似乎比Google要有良心一些^-^。&lt;/p&gt;
&lt;h2 id="export_gr2evernote"&gt;export_gr2evernote&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/kerchen/export_gr2evernote"&gt;@Github&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;目前该项目仍然处在改进中，现在已经有了三种导入处理方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;export2HTMLFiles&lt;/code&gt;，每篇文章都输出为单独的html文件。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;export2enex&lt;/code&gt;，导出为&lt;code&gt;enex&lt;/code&gt;文件，所有转换都在本地完成，对&lt;code&gt;json&lt;/code&gt;文件大小无限制。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;export_gr2evernote&lt;/code&gt;，利用邮件发送功能导入Evernote，脚本不会进行任何的格式优化，所以在Evernote中显示的效果可能很丑陋，不推荐。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;作者本人推荐用前两种方式之一。从我个人测试的情况来看，导入的&lt;code&gt;enex&lt;/code&gt;笔记完全保存了GR中文章的样式，图片、视频都能正常显示和观看，最重要的是整个流程十分简单快捷。&lt;/p&gt;
&lt;p&gt;处理流程（以Windows下&lt;code&gt;export2enex&lt;/code&gt;为例）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首先确保系统安装了python&lt;/li&gt;
&lt;li&gt;用GoogleTakeout导出Reader数据，下载压缩包解压。&lt;/li&gt;
&lt;li&gt;将脚本丢到解压目录，&lt;code&gt;Win+r cmd &amp;lt;RET&amp;gt;&lt;/code&gt;运行Dos窗口， &lt;code&gt;cd&lt;/code&gt;到该目录，运行&lt;code&gt;export2enex.py starred.json &amp;gt; starred.enex&lt;/code&gt;，很快目录下就会出现&lt;code&gt;starred.enex&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Evernote导入&lt;code&gt;starred.enex&lt;/code&gt;文件，注意选择&lt;strong&gt;本地笔记本&lt;/strong&gt;，尤其是文章数很多的情况。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;export2enex.py&lt;/code&gt;这个脚本有个小bug，就是对文章的链接url中的&lt;code&gt;&amp;amp;&lt;/code&gt;字符处理不当（应该转换为&lt;code&gt;&amp;amp;amp;&lt;/code&gt;的形式），导致导出的&lt;code&gt;enex&lt;/code&gt;文件无法被正确导入到Evernote，需要加入如下代码到合适位置：&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;amp;&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;msg_url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;msg_url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;msg_url&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&amp;amp;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;amp;amp;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="Google Reader"></category><category term="Evernote"></category></entry><entry><title>WordPress文章编辑发布方案</title><link href="http://www.joshuazhang.info/posts/2013/Jan/wp-edit-publish-plan.html" rel="alternate"></link><updated>2013-01-04T00:00:00+01:00</updated><author><name>voidmous</name></author><id>tag:www.joshuazhang.info,2013-01-04:posts/2013/Jan/wp-edit-publish-plan.html</id><summary type="html">&lt;p&gt;我已经不再使用WP作为博客平台，其中一个原因就是因为找不到一个适合自己的编辑发布工具链（也许是我太挑剔）。如果你也和我一样对这方面很不满意的话,想要了解其它的方案，这篇文章也许会有帮助。首先要说明的是编辑和发布是两个阶段，如果再详细点还应该包括修改阶段，下面的一些发布流程往往只能照顾到某一个方面，而在另一个方面就相形见绌，总有这样那样的瑕疵。基本上，WordPress的编辑发布方案有这么几大类：&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;后台发布&lt;/h2&gt;
&lt;p&gt;这是默认的，也是便利性、兼容性最好的方案。但是它最大的缺点就在于一个字：慢。这个慢有两个方面，一是后台太笨重，如果你空间本来就不快（比如国外的空间），那加载后台都会等很久；二是WYSIWYG的编辑方式，如果你要搞长篇大论，图文并茂的话，上传图片、预览这些操作都是费事费力的。当然改进的方法也有：使用WP前台编辑插件（什么名字我忘了）、尽量不预览（对html熟悉程度要高）。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;编辑器终端&lt;/h2&gt;
&lt;p&gt;包括两大类：专用的和通用的。&lt;/p&gt;
&lt;p&gt;专用的就有大名鼎鼎的WLW，这应该是许多人坚守Windows平台的原因之一吧。其它如qumana、thingamablog等，虽然可用，但是功能不完善，体验也不好。特别值得一提的是浏览器插件 &lt;a class="reference external" href="https://addons.mozilla.org/en-us/firefox/addon/scribefire-next/"&gt;ScribeFireNext&lt;/a&gt; ，比起WLW也未逊色多少，如果要跨平台的话可以一试。Linux下可以尝试 &lt;a class="reference external" href="http://paranimage.com/6-under-linux-blog-editor/"&gt;这些&lt;/a&gt; 。&lt;/p&gt;
&lt;p&gt;通用的也很多，这里又分两类：WYSIWYG和代码编辑器。所见即所得的比如M$ Office中的 &lt;a class="reference external" href="http://www.dongbinbin.com/2012/07/wordfabuboke/"&gt;Word编辑器&lt;/a&gt; 就可以作为发布终端，&lt;a class="reference external" href="http://hi.baidu.com/yumi44444/item/52e203d0c0f5d2e0b3f77789"&gt;OneNote&lt;/a&gt; 也是选择之一。代码编辑器其实就是指VIM和emacs啦。用这两款编辑器发布文章往往可以使用一些轻量级标记语言，从而简化写作过程，但是修改过程可能很让人恼火。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;云服务中转&lt;/h2&gt;
&lt;p&gt;这一类方案也有很多，可以举出许多例子：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;邮箱转发&lt;/li&gt;
&lt;li&gt;Google docs发布&lt;/li&gt;
&lt;li&gt;云笔记发布&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;前两种方案有诸多限制，因此并不推荐。第三种方案我实践了一段时间，主要用 &lt;a class="reference external" href="http://note.sdo.com/register?ac=634782146519602937"&gt;麦库&lt;/a&gt; 作为编辑终端，所有文章都存在网上，成文后在麦库发布然后复制粘贴到WP博客上，虽然发布过程麻烦，但是胜在编辑是在速度很快的云端，多地点写作的感觉很好。还有一个缺点是图片需要外链到麦库，太依赖此服务。&lt;/p&gt;
&lt;p&gt;应该说选择还是很多的，不过我的要求更多，列表如下：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;网络同步。因为我需要在不同地点都能够编辑文章，如果能够云端编辑更好，省去了同步的时间&lt;/li&gt;
&lt;li&gt;较高的编辑效率。写文章的时候大量的格式修改、插入图片的操作很另人沮丧，编辑效率太低很影响写作的流畅度，WYSIWYG的方式尤其如此。&lt;/li&gt;
&lt;li&gt;快速的响应，这是我讨厌后台发布文章的主因。&lt;/li&gt;
&lt;li&gt;跨平台，windows和linux我都在使用，能够统一编辑当然是最好的。&lt;/li&gt;
&lt;li&gt;延时发布机制。好的文章往往并非一蹴而就的，构思、动笔、不断的修改和打磨是正常的，这就需要草稿能够很好地保存且易于修改。&lt;/li&gt;
&lt;li&gt;图片发布转存。文章里的图片、附件应当能够正确地上传到指定的地址且url可以自由定制。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;基本上我的要求难以同时得到满足，所以有这么一个折腾的理由，我也就顺理成章地转到了Pelican上去了。静态博客当然也有它的缺点，不过暂时而言我对它的喜爱还是多一点的。&lt;/p&gt;
&lt;/div&gt;
</summary><category term="WordPress"></category></entry></feed>